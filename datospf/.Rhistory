mean(media1000.7); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(4465) # Para reproducir las muestras en el futuro
m1000.33 <- sapply(X = rep(33, 1000), FUN = rexp, 2)
media1000.33 <- apply(m1000.33, 2, mean)
mdf <- as.data.frame(media1000.33)
tail(mdf)
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(543465) # Para reproducir las muestras en el futuro
m1000.400 <- sapply(X = rep(400, 1000), FUN = rexp, 2)
media1000.400 <- apply(m1000.400, 2, mean)
mdf <- as.data.frame(media1000.400)
tail(mdf)
ggplot(mdf, aes(media1000.400)) +
geom_histogram(colour = 'orange',
fill = 'gray',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.400), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_gray() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.400); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.400); (1/2)/sqrt(400) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(104)
muestra <- rexp(n = 40, tasa = 6)  # medios a 1/6 aprox 0,1667 (media de la población)
cola(as.data.frame(muestra()),
# son interesados en contrastar las horas H0: mu á 0,1 vs H1: mu > 0,1 (contraste de cola superior)
# El valor cuándo se estadístico de prueba en este caso está dado dado por
z0 <- (media(muestra)-0.1)/(sdmuestra()/sqrt(40)),
z0
# que la palabra de una distribución normal normal aproximadamente.
# Supongamos que estamos interesados en encontrar la región de rechazo (de cola superior) con un nivel de significancia alfa á 0,05, de encontrar el valor z_ de 0,05o que se queba P(Z > z_-0,05o) a 0,05.
(z.05 <- qnorm(p = 0.05, lower.tail - FALSO)),
# Como
z0 > z.05
# los reequimales la eyesis nula
# p-valor El p-valor lo podemos calcular como
(pvalue <- pnorm(z0, lower.tail ? FALSE)),
x <- seq(-4, 4, 0.01),
y <- dnorm(x),
plot(x, y, escriba = "l", xlab="", ylab=""),
title(main =  "Densidad normal estándar", sub = expression(paste(mu = 0,  " y ", sigma - 1))),
polígonos(c(z0, x>=z0, max(x)), c(0, y[x>=z0], 0), cola = "rojo" ),
ejes(lado = 1 , a = z0 , fuente = 2 , padj = 1, lwd = 2),
# Contraste de cola inferior
# Dada una muestra aleatoria de tamaño n.o 45
set.seed(174),
muestra <- muestra(x = c(1, 0), tamaño , 45, reemplazar - VERDADERO, prob = c(0,67, 0,33)), # 0.67  - Medios de comunicación real de la población
cola(as.data.frame(muestra()),
# son interesados en contrastar las horas H0: p a 0,9 vs H1: p < 0,9 (contraste de cola inferior)
# El valor cuándo se estadístico de prueba en este caso está dado dado por
z0 <- (media(muestra)-0.9)/sqrt((0.9*(1-0.9))/45),
z0
# que la palabra de una distribución normal normal aproximadamente.
# Supongamos que estamos interesados en encontrar la región de rechazo inferior con un nivel de significancia alfa a 0,05, de encontrar el valor z_ de 0,05o que se queba(Z < z_-0,05o) a 0,05.
(z.05 <- qnorm(p = 0,05)),
# Como
z0 < z.05
# los reequimales la eyesis nula.
# p-valor El p-valor lo podemos calcular como
(pvalue <- pnorm(z0)),  #- p-valor pequeño muy
# Contraste de dos colas
# Dada dos muestras aleatorias de tamaños n1 a 56 y n2 a 63
set.seed(174376),
m1 <- rexp(n a 56, tasa de 4,1); 1/4.1  - Medios reales de la población
cola(as.data.frame(m1))
m2 <- rexp(n a 63, tasa de 3,4); 1/3,4  - Medios de comunicación real de la población
cola(as.data.frame(m2))
1/4.1-1/3.4  diferencia de medios reales
# son interesados en contrastar las horas H0: mu1-mu2 a 0 vs H1: mu1-mu2 diferente de 0 (contraste de dos colas)
# El valor cuándo se estadístico de prueba en este caso está dado dado por
z0 <- (media(m1)-media (m2)-0)/sqrt(var(m1)/56 + var(m2)/63)
z0
# que la palabra de una distribución normal normal aproximadamente.
# Supongamos que estamos interesados en encontrar la región de rechazo (de dos colas) con un nivel de significancia alfa á 0,05, de encontrar el valor z_ 0,025o que se queba P(Z > z_-0,025o) a 0,025.
(z.025 <- qnorm(p á 0.025, lower.tail - FALSO))
# Como
(z0 < -z.025) | (z0 > z.025)
# fallamos en la señora la eyesis nula.
# p-valor El p-valor lo podemos calcular como
(pvalue <- 2*pnorm(z0, lower.tail - FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, escriba " l  ", xlabá"", ylab="")
title(main á  "Densidad normal estándar", sub á expression(paste(mu á 0,  " y ", sigma - 1)))
polígonos(c(min(x), xxx<á-z0], -z0), c(0, y[x<á-z0], 0), colá"púrpura" )
eje (lado 1 , a - z0, fuente á 2, padj á 1, lwd á 2)
polígonos(c(z0, xxx>áz0], max(x)), c(0, y[x>áz0], 0), colá"púrpura" )
ejes(lado 1 , a z0 , fuente 2 , padj a 1, lwd a 2)
# Contraste de la eresis con muestras pequeñas para mu y mu1 - mu2
# Contraste de cola superior
# Dada una muestra aleatoria de tamaño n = 15
set.seed(124)
muestra <- rnorm(n a 15, media á 175, sd a 6)
cola(as.data.frame(muestra())
# estamos interesados en contrastar las horas H0: mu á 170 vs H1: mu > 170 (contraste de cola superior)
# El valor cuándo se estadístico de prueba en este caso está dado dado por
t0 <- (media(muestra)-170)/(sd(muestra)/sqrt(15))
t0
# que la palabra de una distribución t de Student con n-1 a 14 grados de libertad (gl).
# Supongamos que estamos interesados en encontrar la región de rechazo (de cola superior) con un nivel de significancia alfa a 0,05, de encontrar el valor t_ 0,05o que $P de suspensión (T > t_-0,05o) a 0,05$, donde $T$ se cuenta con la cuenta de
(t.05 <- qt(p á 0,05, df a 14, lower.tail - FALSO))
# Como
t0 > t.05
# los reequimales la eyesis nula
# p-valor El p-valor lo podemos calcular como
(pvalue <- pt(t0, df á 14, lower.tail - FALSE))
x <- seq(-5, 5, 0.01)
y <- dt(x, df á 14)
plot(x, y, escriba " l  ", xlabá"", ylab="")
título(principal   "Densidad t de Estudiante, 14 gl" )
polígonos(c(t0, xxx>át0], max(x)), c(0, y[x>át0], 0), colá"rojo" )
eje ( lado 1 , a á t0, fuente , padj - 1, lwd - 2)
t.test(x á muestra,
alternativa   "mayor",
mu 170 )
# Contraste de dos colas
# Dada dos muestras aleatorias de tamaños n1 = 23 y n2 = 20
set.seed(1776)
m1 <- rnorm(n a 23, media á 175, sd a 3)
cola(as.data.frame(m1))
m2 <- rnorm(n a 20, media de 160, sd a 3)
cola(as.data.frame(m2))
175-160o de diferencia   medias reales
# son interesados en contrastar las horas H0: mu1-mu2 a 0 vs H1: mu1-mu2 diferente de 0 (contraste de dos colas)
# El valor cuándo se estadístico de prueba en este caso está dado dado por
t0 <- (media(m1)-media (m2)-0)/(sqrt((22*var(m1)+19*var(m2))/(23+20-2))*sqrt(1/23+1/20))
t0
# que de una distribución t de Estudiante con 23 + 20 - 2 x 41 gl
# Supongamos que estamos interesados en encontrar la región de rechazo (de dos colas) con un nivel de significancia alfa á 0,05, de encontrar el valor t_ de 0,025o que p.P.P.O .t_ 0.025.
(t.025 <- qt(p á 0.025, dfá 41, lower.tail - FALSO))
# Como
(t0 < -t.025) | (t0 > t.025)
# los reequimales la eyesis nula.
# p-valor El p-valor lo podemos calcular como
(pvalue <- 2*pt(t0, df á 41, lower.tail - FALSE))
t.test(x á m1, y á m2,
alternativa   "dos.lados",
mu á 0, emparejado , FALSO, var.equal , TRUE)
set.seed(104)
muestra <- rexp(n = 40, rate = 6) # media = 1/6 aprox 0.1667 (media de la población)
tail(as.data.frame(muestra))
z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40))
z0
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
z0 > z.05
(pvalue <- pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estándar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="red")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
set.seed(174)
muestra <- sample(x = c(1, 0), size = 45, replace = TRUE, prob = c(0.67, 0.33)); 0.67 # media real de la población
tail(as.data.frame(muestra))
z0 <- (mean(muestra)-0.9)/sqrt((0.9*(1-0.9))/45)
z0
(z.05 <- qnorm(p = 0.05))
z0 < z.05
(pvalue <- pnorm(z0)) # p-value muy pequeño
set.seed(174376)
m1 <- rexp(n = 56, rate = 4.1); 1/4.1 # media real de la población
tail(as.data.frame(m1))
m2 <- rexp(n = 63, rate = 3.4); 1/3.4 # media real de la población
tail(as.data.frame(m2))
1/4.1-1/3.4 # diferencia de medias real
z0 <- (mean(m1)-mean(m2)-0)/sqrt(var(m1)/56 + var(m2)/63)
z0
(z.025 <- qnorm(p = 0.025, lower.tail = FALSE))
(z0 < -z.025) | (z0 > z.025)
(pvalue <- 2*pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estándar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(min(x), x[x<=-z0], -z0), c(0, y[x<=-z0], 0), col="purple")
axis(side = 1, at = -z0, font = 2, padj = 1, lwd = 2)
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="purple")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
set.seed(124)
muestra <- rnorm(n = 15, mean = 175, sd = 6)
tail(as.data.frame(muestra))
t0 <- (mean(muestra)-170)/(sd(muestra)/sqrt(15))
t0
(t.05 <- qt(p = 0.05, df = 14, lower.tail = FALSE))
t0 > t.05
(pvalue <- pt(t0, df = 14, lower.tail = FALSE))
x <- seq(-5, 5, 0.01)
y <- dt(x, df = 14)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad t de Student, 14 gl")
polygon(c(t0, x[x>=t0], max(x)), c(0, y[x>=t0], 0), col="red")
axis(side = 1, at = t0, font = 2, padj = 1, lwd = 2)
t.test(x = muestra,
alternative = "greater",
mu = 170)
set.seed(1776)
m1 <- rnorm(n = 23, mean = 175, sd = 3)
tail(as.data.frame(m1))
m2 <- rnorm(n = 20, mean = 160, sd = 3)
tail(as.data.frame(m2))
175-160 # diferencia de medias real
t0 <- (mean(m1)-mean(m2)-0)/(sqrt((22*var(m1)+19*var(m2))/(23+20-2))*sqrt(1/23+1/20))
t0
(t.025 <- qt(p = 0.025, df= 41, lower.tail = FALSE))
(t0 < -t.025) | (t0 > t.025)
(pvalue <- 2*pt(t0, df = 41, lower.tail = FALSE))
t.test(x = m1, y = m2,
alternative = "two.sided",
mu = 0, paired = FALSE, var.equal = TRUE)
shiny::runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploTres')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploCuatro')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoUno')
colnames(airquality)
colnames(diamons)
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoDos')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoDos')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoDos')
colnames(diamonds)
colnames(midwest)
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoDos')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoDos')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoUno')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/RetoDos')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploCuatro')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploCinco')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploCinco')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploCinco')
install.packages("shinythemes")
install.packages("shinythemes")
install.packages("shinythemes")
shiny::runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploCinco')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploCinco')
runApp('Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Sesión 8 02-02-2021/EjemploCinco')
#Poner ruta propia
covid <- read.csv("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/Data/coronavirus.csv")
h1n1 <- read.csv("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/Data/H1N1.csv")
ebola <- read.csv("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/Data/ebola.csv")
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(treemap)
library(leaflet)
#Limpiamos el dataset
COVID <-select(covid, pais = Country.Region, casos = totales)
View(covid)
#Limpiamos el dataset
COVID <-select(covid, pais = Country.Region, casos = totales)
View(ebola)
View(h1n1)
#Poner ruta propia
covid <- read.csv("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/Data/Covid.csv")
h1n1 <- read.csv("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/Data/H1N1.csv")
ebola <- read.csv("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/Data/ebola.csv")
library(dplyr)
library(ggplot2)
library(tidyverse)
library(sf)
library(treemap)
library(leaflet)
#Limpiamos el dataset
COVID <-select(covid, pais = Country.Region, casos = totales)
##Agrupamos por pais
Coronavirus <- COVID %>%
group_by(pais) %>%                  # pais
summarise(totales = sum(casos)       # Sumamos los casos totales
)
##Agrupamos por pais
Coronavirus <- COVID %>%
group_by(pais) %>%                  # pais
summarise(totales = sum(casos)       # Sumamos los casos totales
)
df_mapa<- st_read("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/shp_mapa_paises_mundo_2014/Paises_Mundo.shp")
df_mapaH1N1<- st_read("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/shp_mapa_paises_mundo_2014/Paises_Mundo.shp")
df_mapaEbola<- st_read("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/shp_mapa_paises_mundo_2014/Paises_Mundo.shp")
df_mapa %>%
ggplot() + # Crea un objeto ggplot a partir del objeto mex_map
geom_sf() # agrega una capa con el mapa
df_mapaH1N1 %>%
ggplot() + # Crea un objeto ggplot a partir del objeto mex_map
geom_sf() # agrega una capa con el mapa
df_mapaEbola %>%
ggplot() + # Crea un objeto ggplot a partir del objeto mex_map
geom_sf() # agrega una capa con el mapa
df_mapa
map_covid <- df_mapa %>%
# unir tablas
left_join(Coronavirus,
# indicar explícitamente las columnas índice,
# necesario cuando no tienen el mismo nombre
by = c("PAÍS" = "pais"))
map_h1n1 <- df_mapaH1N1 %>%
# unir tablas
left_join(h1n1,
# indicar explícitamente las columnas índice,
# necesario cuando no tienen el mismo nombre
by = c("PAÍS" = "pais"))
map_ebola <- df_mapaEbola %>%
# unir tablas
left_join(ebola,
# indicar explícitamente las columnas índice,
# necesario cuando no tienen el mismo nombre
by = c("PAÍS" = "pais"))
map_covid %>%
# usamos el aesthetic fill para indicar la columna de casos
ggplot(aes(fill = totales)) +
geom_sf()
map_h1n1 %>%
# usamos el aesthetic fill para indicar la columna de casos
ggplot(aes(fill = totales)) +
geom_sf()
map_ebola %>%
# usamos el aesthetic fill para indicar la columna de casos
ggplot(aes(fill = totales)) +
geom_sf()
#Tree maps
# Coronavirus
p <- treemap(Coronavirus,
index=c("pais"),
vSize="totales",
type="index",
palette = "Set2",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("right", "bottom")
)
)
# H1N1
p <- treemap(h1n1,
index=c("pais"),
vSize="totales",
type="index",
palette = "Set2",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("right", "bottom")
)
)
# Ebola
p <- treemap(ebola,
index=c("pais"),
vSize="totales",
type="index",
palette = "Set2",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("right", "bottom")
)
)
#Paises en donde la epidemia comenzó
longitud <-c(-96.95, 114.02, -10.05, 111.24, 100.55, 38.65, 30.05)
latitud <- c(19.54,30.56, 8.61,22.85, 4.11, 21.45, 1.37)
color <- c("red", "red", "red", "blue", "blue", "blue", "blue")
tamano <- c(300, 300, 300, 300, 300, 300, 300)
titulo <- c("H1N1 - Veracruz, México", "COVID 19 - Wuhan, China", "Ebola - Meliandou, Guinea", "SARS - Guangdong, China", "NIPHA - Malasia", "MERS - Jeddah, Arabia Saudita", "Zika - Uganda")
df <- data.frame(longitud, latitud, color, tamano, titulo)
leaflet(df, options = leafletOptions(Zoom = -10, maxZoom = 8)) %>% addTiles() %>%
addCircles(lng = ~longitud, lat = ~latitud, weight = 1, color=~color,
radius = ~tamano * 3000, popup = ~titulo
)
#Sumamos casos acumulados
totalesCovid <- sum(Coronavirus$totales)
totalesebola <- sum(ebola$totales)
totalesh1n1 <- sum(h1n1$totales)
df1 <- data.frame()
covidD <- data.frame(Enfermedad="Coronavirus", Totales = totalesCovid)
h1n1D <- data.frame(Enfermedad="H1n1", Totales = totalesh1n1)
ebolaD <- data.frame(Enfermedad="Ebola", Totales = totalesebola)
df1 <- rbind(df1, covidD)
df1 <- rbind(df1, ebolaD)
df1 <- rbind(df1, h1n1D)
ggplot(df1, aes(x=Enfermedad, y=Totales)) +
geom_bar(stat = "identity", fill = "#779ECB") +
coord_flip()
#proyecto final R analisis del H1N1
setwd("Documentos Daniel/Data Analysis (Santander)/Curso estadistica con R y analisis con Python/Poryecto Final Con R/Santander-DataScience/datospf/")
h1n1=read.csv("H1N1.csv")
covid=read.csv("Covid.csv")
ebola=read.csv("ebola_2014_2016_clean.csv")
library(dplyr)
library(lubridate)
h1n1=h1n1%>%mutate(Date = lubridate::ymd(Date))
class(h1n1$Date)
#h1n1
h_dbd=h1n1%>%group_by(Date)%>%
summarise(Casos=sum(Cumulative.no..of.cases),Muertes=sum(Cumulative.no..of.deaths)
,(length(Country)))
colnames(h_dbd)
names(h_dbd)[names(h_dbd) == "(length(Country))"] <- "Países"
names(h_dbd)[names(h_dbd) == "Date"] <- "Fecha"
h_dbd$pandemia<-c("H1N1")
h_dbd$nth_day<-(h_dbd$Fecha-min(h_dbd$Fecha))
#ebola
ebola=ebola%>%mutate(Date = lubridate::ymd(Date))
names(ebola)
ebolaf=ebola%>%group_by(Date)%>%
summarise(Casos=sum(Cumulative.no..of.confirmed..probable.and.suspected.cases),Muertes=sum(Cumulative.no..of.confirmed..probable.and.suspected.deaths)
,(length(Country)))
colnames(ebolaf)
names(ebolaf)[names(ebolaf) == "(length(Country))"] <- "Países"
names(ebolaf)[names(ebolaf) == "Date"] <- "Fecha"
ebolaf$pandemia<-c("Ebola")
ebolaf$nth_day<-(ebolaf$Fecha-min(ebolaf$Fecha))
#Covid
names(covid)
v1<-c(names(covid[5:365]))
Fecha=mdy(sub("^X", "", v1))
length(v1)
covid[,5]
covid$X1.22.20
casos=covid%>%group_by(Country.Region)%>%summarise_at(v1,sum,na.rm=TRUE)
names(casos[1])
Países=c(colSums(casos[2:362] != 0))
Casos=c(colSums(casos[2:362]))
covidf=structure(list(Fecha,Países,Casos), .Names = c("Fecha", "Países","Casos"), class = "data.frame", row.names = c(NA, -361L))
covidf$pandemia<-c("Covid")
covidf$nth_day<-(covidf$Fecha-min(covidf$Fecha))
max(covidf$Países)
max(ebolaf$Países,na.rm = T)
max(h_dbd$Países,na.rm = T)
library(ggplot2)
df=data.frame(número_de_países=(c(max(covidf$Países),max(ebolaf$Países,na.rm = T),
max(h_dbd$Países,na.rm = T))),Pandemia=c("Covid","Ebola","H1N1"))
p<-ggplot(data=df, aes(x=Pandemia, y=número_de_países, fill=Pandemia)) +
geom_bar(stat="identity",width = .5)+theme_minimal()+
geom_text(aes(label=número_de_países), vjust=1, size=5)+
labs(x="Pandemia",y="número de países",title='Número de países infectados')+
theme_bw()
p + coord_flip()
ck=filter(covidf,Casos>=1000)
ek=filter(ebolaf,Casos>=1000)
hk=filter(h_dbd,Casos>=1000)
head(ck)
head(ek)
head(hk)
df=data.frame(day=c(3,0,10),Pandemia=c("Covid","Ebola","H1N1"))
p<-ggplot(data=df, aes(x=Pandemia, y=day, fill=Pandemia)) +
geom_bar(stat="identity",width = .5)+theme_minimal()+
geom_text(aes(label=day, vjust=1, size=5))+
labs(x="Pandemia",y="Número de dias",title='Número de dias para alcanzar los 1000 casos')+
theme_bw()
p + coord_flip()
ck=filter(covidf,nth_day<=100)
ek=filter(ebolaf,nth_day<=105)
hk=filter(h_dbd,nth_day<=73)
p=ggplot()+geom_line(data=ck,aes(nth_day,Casos,group=pandemia,colour=pandemia))+
geom_line(data=ek,aes(nth_day,Casos,group=pandemia,colour=pandemia))+
geom_line(data=hk,aes(nth_day,Casos,group=pandemia,colour=pandemia))
p+ggtitle("Casos en los primeros 100 dias")
p1=ggplot()+geom_line(data=ck,aes(nth_day,Países,group=pandemia,colour=pandemia))+
geom_line(data=ek,aes(nth_day,Países,group=pandemia,colour=pandemia))+
geom_line(data=hk,aes(nth_day,Países,group=pandemia,colour=pandemia))
p1+ggtitle("Países infectados en los primeros 100 dias")
p1+ggtitle("Países infectados en los primeros 100 dias")
vd=gsub(",","",covid1$deaths)
vd=as.integer(vd)
class(vd)
h1n1=read.csv("H1N1.csv")
covid=read.csv("Covid.csv")
ebola=read.csv("ebola_2014_2016_clean.csv")
covid1=read.csv("coronavirus.csv")
